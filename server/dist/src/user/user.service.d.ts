import { Repository } from 'typeorm';
import { CreateUserDto } from './dto/create-user.dto';
import { UserEntity } from './user.entity';
import { Request, Response } from 'express';
import { UserProfileEntity } from 'src/common/entities/user-profile.entity';
import { EditProfileDto } from './dto/edit-profile.dto';
import { CommunityEntity } from 'src/community/community.entity';
import { EditAccountDto } from './dto/edit-account.dto';
import { SetProfileDto } from './dto/set-profile.dto';
export declare class UserService {
    private userRepository;
    private userProfileRepository;
    private communityRepository;
    constructor(userRepository: Repository<UserEntity>, userProfileRepository: Repository<UserProfileEntity>, communityRepository: Repository<CommunityEntity>);
    getUserProfile(userId: number): Promise<UserEntity>;
    checkNickname(nickname: string): Promise<void>;
    checkEmail(email: string): Promise<void>;
    createUser(createUserDto: CreateUserDto): Promise<{
        provider: string;
        active: true;
        profile: UserProfileEntity;
        email: string;
        name: string;
        nickname: string;
        id: number;
        profileId: number;
        createdAt: Date;
        updatedAt: Date;
        deletedAt: Date;
        posts: CommunityEntity[];
        sanchaeks: import("../sanchaek/sanchaek.entity").SanchaekEntity[];
        likes: import("../common/entities/community-like.entity").CommunityLikeEntity[];
        communityComments: import("../common/entities/community-comment.entity").CommunityCommentEntity[];
        sanchaekComments: import("../common/entities/sanchaek-comment.entity").SanchaekCommentEntity[];
    }>;
    setProfile(userId: number, setProfileDto: SetProfileDto): Promise<UserEntity>;
    editProfile(userId: number, editProfileDto: EditProfileDto, imgUrls: string[]): Promise<UserEntity>;
    editAccount(userId: number, editAccountDto: EditAccountDto): Promise<UserEntity>;
    googleLoginCallback(req: Request, res: Response): Promise<void | Response<any, Record<string, any>>>;
    kakaoLoginCallback(req: Request, res: Response): Promise<void | Response<any, Record<string, any>>>;
    getMyPosts(userId: number): Promise<CommunityEntity[]>;
    getLikedPosts(userId: number): Promise<CommunityEntity[]>;
    getCommentedPosts(userId: number): Promise<CommunityEntity[]>;
    getMyProfile(userId: number): Promise<UserEntity>;
    signout(userId: number): Promise<import("typeorm").DeleteResult>;
}
